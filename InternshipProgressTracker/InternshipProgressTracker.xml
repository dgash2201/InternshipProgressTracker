<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InternshipProgressTracker</name>
    </assembly>
    <members>
        <member name="T:InternshipProgressTracker.Controllers.AdminsController">
            <summary>
            Represents Web API of Admins
            </summary>
        </member>
        <member name="M:InternshipProgressTracker.Controllers.AdminsController.GetAllUsers">
            <summary>
            Get list of all users
            </summary>
            <response code="401">Authorization token is invalid</response>
            <response code="403">Forbidden for this role</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:InternshipProgressTracker.Controllers.AdminsController.CreateAdmin(InternshipProgressTracker.Models.Admins.CreateAdminDto)">
            <summary>
            Add admin role to user
            </summary>
            <response code="401">Authorization token is invalid</response>
            <response code="403">Forbidden for this role</response>
            <response code="404">User was not found</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:InternshipProgressTracker.Controllers.AdminsController.CreateAdmin(InternshipProgressTracker.Models.Admins.CreateMentorDto)">
            <summary>
            Add mentor role to user
            </summary>
            <response code="401">Authorization token is invalid</response>
            <response code="403">Forbidden for this role</response>
            <response code="404">User was not found</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="T:InternshipProgressTracker.Controllers.InternshipStreamsController">
            <summary>
            Represents Web API of Internship Streams
            </summary>
        </member>
        <member name="M:InternshipProgressTracker.Controllers.InternshipStreamsController.GetWithSoftDeleted">
            <summary>
            Get all internship stream including soft deleted (only for admin)
            </summary>
            <response code="401">Authorization token is invalid</response>
            <response code="403">Forbidden for this role</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:InternshipProgressTracker.Controllers.InternshipStreamsController.AddMentor(InternshipProgressTracker.Models.InternshipStreams.InternshipStreamMentorDto)">
            <summary>
            Bind mentor with internship stream
            </summary>
            <response code="401">Authorization token is invalid</response>
            <response code="403">Forbidden for this role</response>
            <response code="404">Internship stream or mentor was not found</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:InternshipProgressTracker.Controllers.InternshipStreamsController.AddStudent(InternshipProgressTracker.Models.InternshipStreams.InternshipStreamStudentDto)">
            <summary>
            Bind student with internship stream
            </summary>
            <response code="401">Authorization token is invalid</response>
            <response code="403">Forbidden for this role</response>
            <response code="404">Internship stream or student was not found</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:InternshipProgressTracker.Controllers.InternshipStreamsController.RemoveMentor(InternshipProgressTracker.Models.InternshipStreams.InternshipStreamMentorDto)">
            <summary>
            Remove mentor from internship stream
            </summary>
            <response code="401">Authorization token is invalid</response>
            <response code="403">Forbidden for this role</response>
            <response code="404">Internship stream or mentor was not found</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:InternshipProgressTracker.Controllers.InternshipStreamsController.RemoveStudent(InternshipProgressTracker.Models.InternshipStreams.InternshipStreamStudentDto)">
            <summary>
            Remove student from internship stream
            </summary>
            <response code="401">Authorization token is invalid</response>
            <response code="403">Forbidden for this role</response>
            <response code="404">Internship stream or student was not found</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:InternshipProgressTracker.Controllers.InternshipStreamsController.Get(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get list of internship streams
            </summary>
            <response code="401">Authorization token is invalid</response>
            <response code="403">Forbidden for this role</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:InternshipProgressTracker.Controllers.InternshipStreamsController.Get(System.Int32)">
            <summary>
            Get an internship stream by id
            </summary>
            <param name="id">Id of the internship stream</param>
            <response code="401">Authorization token is invalid</response>
            <response code="403">Forbidden for this role</response>
            <response code="404">Internship stream was not found</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:InternshipProgressTracker.Controllers.InternshipStreamsController.Create(InternshipProgressTracker.Models.InternshipStreams.InternshipStreamDto)">
            <summary>
            Create internship stream
            </summary>
            <param name="createDto">Contains data for creation</param>
            <response code="401">Authorization token is invalid</response>
            <response code="403">Forbidden for this role</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:InternshipProgressTracker.Controllers.InternshipStreamsController.Update(InternshipProgressTracker.Models.Common.PutRequestDto{InternshipProgressTracker.Models.InternshipStreams.InternshipStreamDto})">
            <summary>
            Update internship stream data
            </summary>
            <param name="id">Id of the internship stream</param>
            <param name="updateDto">New data</param>
            <response code="401">Authorization token is invalid</response>
            <response code="403">Forbidden for this role</response>
            <response code="404">Internship stream was not found</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:InternshipProgressTracker.Controllers.InternshipStreamsController.Update(InternshipProgressTracker.Models.Common.PatchRequestDto{InternshipProgressTracker.Models.InternshipStreams.InternshipStreamDto})">
            <summary>
            Patch internship stream data
            </summary>
            <param name="id">Id of internship stream</param>
            <param name="patchDocument">JsonPatch operations</param>
            <response code="401">Authorization token is invalid</response>
            <response code="403">Forbidden for this role</response>
            <response code="404">Internship stream was not found</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:InternshipProgressTracker.Controllers.InternshipStreamsController.Delete(System.Int32)">
            <summary>
            Mark internship stream as deleted
            </summary>
            <param name="id">Id of the internship stream</param>
            <response code="401">Authorization token is invalid</response>
            <response code="403">Forbidden for this role</response>
            <response code="404">Internship stream was not found</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:InternshipProgressTracker.Controllers.InternshipStreamsController.HardDelete(System.Int32)">
            <summary>
            Delete internship stream (only for admin)
            </summary>
            <param name="id">Id of internship stream</param>
            <response code="401">Authorization token is invalid</response>
            <response code="403">Forbidden for this role</response>
            <response code="404">Study plan was not found</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="T:InternshipProgressTracker.Controllers.StudentsController">
            <summary>
            Represents Web API of students
            </summary>
        </member>
        <member name="M:InternshipProgressTracker.Controllers.StudentsController.SetStudentGrade(InternshipProgressTracker.Models.Students.StudentGradeDto)">
            <summary>
            Set student grade
            </summary>
        </member>
        <member name="M:InternshipProgressTracker.Controllers.StudentsController.GradeStudentProgress(InternshipProgressTracker.Models.Students.GradeProgressDto)">
            <summary>
            Set grade to student progress on study plan entry
            </summary>
            <response code="400">Study plan entry was not finished by the student</response>
            <response code="401">Authorization token is invalid</response>
            <response code="403">Forbidden for this role</response>
            <response code="404">Student, mentor or study plan entry was not found</response>
            <response code="409">Student already has grade on this study plan entry</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:InternshipProgressTracker.Controllers.StudentsController.AddNotes(InternshipProgressTracker.Models.Students.NotesDto)">
            <summary>
            Add notes
            </summary>
            <response code="400">Study plan entry was not started by the student</response>
            <response code="401">Authorization token is invalid</response>
            <response code="403">Forbidden for this role</response>
            <response code="404">Studentor study plan entry was not found</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:InternshipProgressTracker.Controllers.StudentsController.StartStudyPlanEntry(InternshipProgressTracker.Models.Students.ProgressDto)">
            <summary>
            Mark study plan entry as started
            </summary>
            <response code="401">Authorization token is invalid</response>
            <response code="403">Forbidden for this role</response>
            <response code="404">Student or study plan entry was not found</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:InternshipProgressTracker.Controllers.StudentsController.FinishStudyPlanEntry(InternshipProgressTracker.Models.Students.ProgressDto)">
            <summary>
            Mark study plan entry as finished
            </summary>
            <response code="401">Authorization token is invalid</response>
            <response code="403">Forbidden for this role</response>
            <response code="404">Student or study plan entry was not found</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="T:InternshipProgressTracker.Controllers.StudyPlanEntriesController">
            <summary>
            Represents Web API of Study Plan Entries
            </summary>
        </member>
        <member name="M:InternshipProgressTracker.Controllers.StudyPlanEntriesController.GetWithSoftDeleted">
            <summary>
            Get all study plan entries including soft deleted (only for admin)
            </summary>
            <response code="401">Authorization token is invalid</response>
            <response code="403">Forbidden for this role</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:InternshipProgressTracker.Controllers.StudyPlanEntriesController.Get">
            <summary>
            Get list of study plan entries
            </summary>
            <response code="401">Authorization token is invalid</response>
            <response code="403">Forbidden for this role</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:InternshipProgressTracker.Controllers.StudyPlanEntriesController.Get(System.Int32)">
            <summary>
            Get study plan entry by id
            </summary>
            <param name="id">Id of study plan</param>
            <response code="401">Authorization token is invalid</response>
            <response code="403">Forbidden for this role</response>
            <response code="404">Study plan entry was not found</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:InternshipProgressTracker.Controllers.StudyPlanEntriesController.Create(InternshipProgressTracker.Models.StudyPlanEntries.StudyPlanEntryDto)">
            <summary>
            Create study plan entry
            </summary>
            <param name="createDto">Data for creation</param>
            <response code="401">Authorization token is invalid</response>
            <response code="403">Forbidden for this role</response>
            <response code="404">Related study plan was not found</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:InternshipProgressTracker.Controllers.StudyPlanEntriesController.Update(InternshipProgressTracker.Models.Common.PutRequestDto{InternshipProgressTracker.Models.StudyPlanEntries.StudyPlanEntryDto})">
            <summary>
            Update study plan entry data
            </summary>
            <param name="id">Id of study plan</param>
            <param name="updateDto">New data</param>
            <response code="401">Authorization token is invalid</response>
            <response code="403">Forbidden for this role</response>
            <response code="404">Study plan entry was not found</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:InternshipProgressTracker.Controllers.StudyPlanEntriesController.Update(InternshipProgressTracker.Models.Common.PatchRequestDto{InternshipProgressTracker.Models.StudyPlanEntries.StudyPlanEntryDto})">
            <summary>
            Patch study plan entry data
            </summary>
            <param name="id">Id of study plan entry </param>
            <param name="patchDocument">JsonPatch operations</param>
            <response code="401">Authorization token is invalid</response>
            <response code="403">Forbidden for this role</response>
            <response code="404">Study plan entry or related study plan was not found</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:InternshipProgressTracker.Controllers.StudyPlanEntriesController.Delete(System.Int32)">
            <summary>
            Mark study plan entry as deleted
            </summary>
            <param name="id">Id of study plan</param>
            <response code="401">Authorization token is invalid</response>
            <response code="403">Forbidden for this role</response>
            <response code="404">Study plan entry was not found</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:InternshipProgressTracker.Controllers.StudyPlanEntriesController.HardDelete(System.Int32)">
            <summary>
            Delete study plan entry (only for admin)
            </summary>
            <param name="id">Id of study plan entry</param>
            <response code="401">Authorization token is invalid</response>
            <response code="403">Forbidden for this role</response>
            <response code="404">Study plan was not found</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="T:InternshipProgressTracker.Controllers.StudyPlansController">
            <summary>
            Represents Web API of Study Plans
            </summary>
        </member>
        <member name="M:InternshipProgressTracker.Controllers.StudyPlansController.GetWithSoftDeleted">
            <summary>
            Get all study plans including soft deleted (only for admin)
            </summary>
            <response code="401">Authorization token is invalid</response>
            <response code="403">Forbidden for this role</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:InternshipProgressTracker.Controllers.StudyPlansController.Get">
            <summary>
            Get list of study plans
            </summary>
            <response code="401">Authorization token is invalid</response>
            <response code="403">Forbidden for this role</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:InternshipProgressTracker.Controllers.StudyPlansController.Get(System.Int32)">
            <summary>
            Get study plan by id
            </summary>
            <param name="id">Id of study plan</param>
            <response code="401">Authorization token is invalid</response>
            <response code="403">Forbidden for this role</response>
            <response code="404">Study plan was not found</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:InternshipProgressTracker.Controllers.StudyPlansController.Create(InternshipProgressTracker.Models.StudyPlans.StudyPlanDto)">
            <summary>
            Create study plan
            </summary>
            <param name="createDto">Data for creation</param>
            <response code="401">Authorization token is invalid</response>
            <response code="403">Forbidden for this role</response>
            <response code="404">Related internship stream was not found</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:InternshipProgressTracker.Controllers.StudyPlansController.Update(InternshipProgressTracker.Models.Common.PutRequestDto{InternshipProgressTracker.Models.StudyPlans.StudyPlanDto})">
            <summary>
            Update study plan data
            </summary>
            <param name="id">Id of study plan</param>
            <param name="updateDto">New data</param>
            <response code="401">Authorization token is invalid</response>
            <response code="403">Forbidden for this role</response>
            <response code="404">Study plan or related internship stream was not found</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:InternshipProgressTracker.Controllers.StudyPlansController.Update(InternshipProgressTracker.Models.Common.PatchRequestDto{InternshipProgressTracker.Models.StudyPlans.StudyPlanDto})">
            <summary>
            Patch study plan data
            </summary>
            <param name="id">Id of study plan</param>
            <param name="patchDocument">JsonPatch operations</param>
            <response code="401">Authorization token is invalid</response>
            <response code="403">Forbidden for this role</response>
            <response code="404">Study plan or related internship stream was not found</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:InternshipProgressTracker.Controllers.StudyPlansController.Delete(System.Int32)">
            <summary>
            Mark study plan as deleted
            </summary>
            <param name="id">Id of study plan</param>
            <response code="401">Authorization token is invalid</response>
            <response code="403">Forbidden for this role</response>
            <response code="404">Study plan was not found</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:InternshipProgressTracker.Controllers.StudyPlansController.HardDelete(System.Int32)">
            <summary>
            Delete study plan (only for admin)
            </summary>
            <param name="id">Id of study plan</param>
            <response code="401">Authorization token is invalid</response>
            <response code="403">Forbidden for this role</response>
            <response code="404">Study plan was not found</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="T:InternshipProgressTracker.Controllers.UsersController">
            <summary>
            Represents Web API of Users
            </summary>
        </member>
        <member name="M:InternshipProgressTracker.Controllers.UsersController.Get(System.Int32)">
            <summary>
            Get user by id
            </summary>
            <param name="id">Id of user</param>
        </member>
        <member name="M:InternshipProgressTracker.Controllers.UsersController.Register(InternshipProgressTracker.Models.Users.RegisterDto,System.Threading.CancellationToken)">
            <summary>
            Register new user
            </summary>
            <param name="registerDto">Contains signup form data</param>
            <response code="400">Incorrect registration data</response>
            <response code="409">User already exists</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:InternshipProgressTracker.Controllers.UsersController.Login(InternshipProgressTracker.Models.Users.LoginDto,System.Threading.CancellationToken)">
            <summary>
            Authentificate user
            </summary>
            <param name="loginDto">Contains login form data</param>
            <response code="400">Email or password is incorrect</response>
            <response code="404">User was not found</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:InternshipProgressTracker.Controllers.UsersController.RefreshJwt(System.String,System.Int32)">
            <summary>
            Create new JWT
            </summary>
            <response code="400">Refresh token is incorrect</response>
            <response code="404">User was not found</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="T:InternshipProgressTracker.Database.InternshipProgressTrackerDbContext">
            <summary>
            Class for working with InternshipProgressTracker database
            </summary>
        </member>
        <member name="M:InternshipProgressTracker.Database.InternshipProgressTrackerDbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Method for configuring relationships between entities by Fluent API
            </summary>
            <param name="builder">Builder to construct a model for a context</param>
        </member>
        <member name="T:InternshipProgressTracker.Database.SoftDeleteQueryExtension">
            <summary>
            Contains extension method, which adds a filter for entities marked as deleted
            </summary>
        </member>
        <member name="M:InternshipProgressTracker.Database.SoftDeleteQueryExtension.AddSoftDeleteQueryFilter(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)">
            <summary>
            Adds soft deleted entities filter for this entity type
            </summary>
        </member>
        <member name="M:InternshipProgressTracker.Database.SoftDeleteQueryExtension.GetSoftDeleteFilter``1">
            <summary>
            Filters entities marked as deleted
            </summary>
        </member>
        <member name="T:InternshipProgressTracker.Entities.Enums.StudentGrade">
            <summary>
            Contains indepedent student grades
            </summary>
        </member>
        <member name="T:InternshipProgressTracker.Entities.Enums.InternshipStreamStatus">
            <summary>
            Contains statuses of internship stream
            </summary>
        </member>
        <member name="T:InternshipProgressTracker.Entities.Enums.MentorRole">
            <summary>
            Contains roles of mentor
            </summary>
        </member>
        <member name="T:InternshipProgressTracker.Entities.InternshipStream">
            <summary>
            Represents the InternshipStream entity
            </summary>
        </member>
        <member name="T:InternshipProgressTracker.Entities.Mentor">
            <summary>
            Represents the Mentor entity
            </summary>
        </member>
        <member name="T:InternshipProgressTracker.Entities.Student">
            <summary>
            Represents the Student entity
            </summary>
        </member>
        <member name="T:InternshipProgressTracker.Entities.StudentStudyPlanProgress">
            <summary>
            Represents the StudentStudyPlanProgress entity
            </summary>
        </member>
        <member name="T:InternshipProgressTracker.Entities.StudyPlan">
            <summary>
            Represents the StudyPlan entity
            </summary>
        </member>
        <member name="T:InternshipProgressTracker.Entities.StudyPlanEntry">
            <summary>
            Represents the StudyPlanEntry entity
            </summary>
        </member>
        <member name="T:InternshipProgressTracker.Entities.User">
            <summary>
            Represents the User entity
            </summary>
        </member>
        <member name="T:InternshipProgressTracker.Exceptions.AlreadyExistsException">
            <summary>
            Exception that means that an entity already exists
            </summary>
        </member>
        <member name="T:InternshipProgressTracker.Exceptions.BadRequestException">
            <summary>
            Exception that means that a request has incorrect data
            </summary>
        </member>
        <member name="T:InternshipProgressTracker.Exceptions.NotFoundException">
            <summary>
            Exception that means that an entity was not found
            </summary>
        </member>
        <member name="T:InternshipProgressTracker.Models.Common.PatchRequestDto`1">
            <summary>
            DTO for patch requests
            </summary>
            <typeparam name="TModel"></typeparam>
        </member>
        <member name="T:InternshipProgressTracker.Models.Common.PutRequestDto`1">
            <summary>
            DTO for put requests
            </summary>
            <typeparam name="TModel"></typeparam>
        </member>
        <member name="T:InternshipProgressTracker.Models.InternshipStreams.InternshipStreamMentorDto">
            <summary>
            Contains data for binding mentro with internship stream
            </summary>
        </member>
        <member name="T:InternshipProgressTracker.Models.InternshipStreams.InternshipStreamStudentDto">
            <summary>
            Contains data for binding student with internship stream
            </summary>
        </member>
        <member name="T:InternshipProgressTracker.Models.Students.GradeProgressDto">
            <summary>
            Contains data for grading student progress by mentor
            </summary>
        </member>
        <member name="T:InternshipProgressTracker.Models.Students.NotesDto">
            <summary>
            Contains data for adding notes
            </summary>
        </member>
        <member name="T:InternshipProgressTracker.Models.StudyPlans.StudyPlanDto">
            <summary>
            Contains data for creating a study plan
            </summary>
        </member>
        <member name="T:InternshipProgressTracker.Models.Token.TokenResponseDto">
            <summary>
            DTO with JWT and refresh token
            </summary>
        </member>
        <member name="T:InternshipProgressTracker.Models.Users.LoginDto">
            <summary>
            Represents data from login form
            </summary>
        </member>
        <member name="T:InternshipProgressTracker.Models.Users.RegisterDto">
            <summary>
            Represents data from signup form
            </summary>
        </member>
        <member name="T:InternshipProgressTracker.Services.Admins.AdminService">
            <summary>
            Service for admins
            </summary>
        </member>
        <member name="M:InternshipProgressTracker.Services.Admins.AdminService.GetAllUsersAsync">
            <summary>
            Gets list of all users
            </summary>
            <returns></returns>
        </member>
        <member name="M:InternshipProgressTracker.Services.Admins.AdminService.CreateAdminAsync(System.Int32)">
            <summary>
            Adds admin role to user
            </summary>
            <param name="userId"></param>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:InternshipProgressTracker.Services.Admins.AdminService.CreateMentorAsync(System.Int32,InternshipProgressTracker.Entities.Enums.MentorRole)">
            <summary>
            Creates mentor
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="T:InternshipProgressTracker.Services.Admins.IAdminService">
            <summary>
            Interface for user service
            </summary>
        </member>
        <member name="T:InternshipProgressTracker.Services.InternshipStreams.IInternshipStreamService">
            <summary>
            Internship stream service interface
            </summary>
        </member>
        <member name="T:InternshipProgressTracker.Services.InternshipStreams.InternshipStreamService">
            <summary>
            Logic service which works with internship streams
            </summary>
        </member>
        <member name="M:InternshipProgressTracker.Services.InternshipStreams.InternshipStreamService.AddMentorAsync(System.Int32,System.Int32)">
            <summary>
            Binds mentor with stream
            </summary>
        </member>
        <member name="M:InternshipProgressTracker.Services.InternshipStreams.InternshipStreamService.AddStudentAsync(System.Int32,System.Int32)">
            <summary>
            Binds student with stream
            </summary>
        </member>
        <member name="M:InternshipProgressTracker.Services.InternshipStreams.InternshipStreamService.RemoveMentorAsync(System.Int32,System.Int32)">
            <summary>
            Remove mentor from internship stream
            </summary>
        </member>
        <member name="M:InternshipProgressTracker.Services.InternshipStreams.InternshipStreamService.RemoveStudentAsync(System.Int32,System.Int32)">
            <summary>
            Remove student from internship stream
            </summary>
        </member>
        <member name="M:InternshipProgressTracker.Services.InternshipStreams.InternshipStreamService.GetWithSoftDeletedAsync">
            <summary>
            Gets all internship streams
            </summary>
        </member>
        <member name="M:InternshipProgressTracker.Services.InternshipStreams.InternshipStreamService.GetAsync(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets list of internship streams
            </summary>
        </member>
        <member name="M:InternshipProgressTracker.Services.InternshipStreams.InternshipStreamService.GetAsync(System.Int32)">
            <summary>
            Gets internship stream by id
            </summary>
            <param name="id">Internship stream id</param>
        </member>
        <member name="M:InternshipProgressTracker.Services.InternshipStreams.InternshipStreamService.CreateAsync(InternshipProgressTracker.Models.InternshipStreams.InternshipStreamDto)">
            <summary>
            Creates internship stream from createDto
            </summary>
            <param name="createDto">Data for creation</param>
        </member>
        <member name="M:InternshipProgressTracker.Services.InternshipStreams.InternshipStreamService.UpdateAsync(System.Int32,InternshipProgressTracker.Models.InternshipStreams.InternshipStreamDto)">
            <summary>
            Updates data in internship stream
            </summary>
            <param name="id">Internship stream id</param>
            <param name="updateDto">New data</param>
        </member>
        <member name="M:InternshipProgressTracker.Services.InternshipStreams.InternshipStreamService.UpdateAsync(System.Int32,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{InternshipProgressTracker.Models.InternshipStreams.InternshipStreamDto})">
            <summary>
            Patches internship stream
            </summary>
            <param name="id">Id of internship stream</param>
            <param name="patchDocument">Json Patch operations</param>
        </member>
        <member name="M:InternshipProgressTracker.Services.InternshipStreams.InternshipStreamService.SoftDeleteAsync(System.Int32)">
            <summary>
            Marks the entity as deleted
            </summary>
            <param name="id">Internship stream id</param>
        </member>
        <member name="M:InternshipProgressTracker.Services.InternshipStreams.InternshipStreamService.DeleteAsync(System.Int32)">
            <summary>
            Deletes internship stream by id
            </summary>
            <param name="id">Internship stream id</param>
        </member>
        <member name="T:InternshipProgressTracker.Services.Mentors.MentorService">
            <summary>
            Logic service which works with students
            </summary>
        </member>
        <member name="M:InternshipProgressTracker.Services.Mentors.MentorService.CreateAsync(InternshipProgressTracker.Entities.User)">
            <summary>
            Creates a student based on the user
            </summary>
        </member>
        <member name="T:InternshipProgressTracker.Services.Students.IStudentService">
            <summary>
            Student service interface
            </summary>
        </member>
        <member name="T:InternshipProgressTracker.Services.Students.StudentService">
            <summary>
            Logic service which works with students
            </summary>
        </member>
        <member name="M:InternshipProgressTracker.Services.Students.StudentService.GetAsync">
            <summary>
            Gets the list of students
            </summary>
        </member>
        <member name="M:InternshipProgressTracker.Services.Students.StudentService.GetAsync(System.Int32)">
            <summary>
            Gets a student by id
            </summary>
            <param name="id">Student id</param>
        </member>
        <member name="M:InternshipProgressTracker.Services.Students.StudentService.CreateAsync(InternshipProgressTracker.Entities.User)">
            <summary>
            Creates a student based on the user
            </summary>
            <param name="user">User entity</param>
        </member>
        <member name="M:InternshipProgressTracker.Services.Students.StudentService.AddNotesAsync(System.Int32,InternshipProgressTracker.Models.Students.NotesDto)">
            <summary>
            Adds student notes
            </summary>
        </member>
        <member name="M:InternshipProgressTracker.Services.Students.StudentService.GradeStudentProgressAsync(InternshipProgressTracker.Models.Students.GradeProgressDto)">
            <summary>
            Set grade to student progress
            </summary>
        </member>
        <member name="M:InternshipProgressTracker.Services.Students.StudentService.SetStudentGradeAsync(System.Int32,InternshipProgressTracker.Entities.Enums.StudentGrade)">
            <summary>
            Sets student grade
            </summary>
            <param name="studentId">Id of student</param>
            <param name="grade">Grade of his work</param>
        </member>
        <member name="M:InternshipProgressTracker.Services.Students.StudentService.StartStudyPlanEntryAsync(System.Int32,System.Int32)">
            <summary>
            Mark study plan entry as started by student
            </summary>
            <param name="studentId">Id of student</param>
            <param name="entryId">Id of study plan entry</param>
        </member>
        <member name="M:InternshipProgressTracker.Services.Students.StudentService.FinishStudyPlanEntryAsync(System.Int32,System.Int32)">
            <summary>
            Mark study plan entry as finished by student
            </summary>
            <param name="studentId">Id of student</param>
            <param name="entryId">Id of study plan entry</param>
        </member>
        <member name="T:InternshipProgressTracker.Services.StudyPlanEntries.IStudyPlanEntryService">
            <summary>
            Interface of study plan entry service
            </summary>
        </member>
        <member name="T:InternshipProgressTracker.Services.StudyPlanEntries.StudyPlanEntryService">
            <summary>
            Service for working with study plan entries
            </summary>
        </member>
        <member name="M:InternshipProgressTracker.Services.StudyPlanEntries.StudyPlanEntryService.GetWithSoftDeletedAsync">
            <summary>
            Gets all study plan entries
            </summary>
            <returns></returns>
        </member>
        <member name="M:InternshipProgressTracker.Services.StudyPlanEntries.StudyPlanEntryService.GetAsync">
            <summary>
            Gets list of study plan entries
            </summary>
            <returns></returns>
        </member>
        <member name="M:InternshipProgressTracker.Services.StudyPlanEntries.StudyPlanEntryService.GetAsync(System.Int32)">
            <summary>
            Gets study plan entry by id
            </summary>
            <param name="id">Id of study plan</param>
        </member>
        <member name="M:InternshipProgressTracker.Services.StudyPlanEntries.StudyPlanEntryService.CreateAsync(InternshipProgressTracker.Models.StudyPlanEntries.StudyPlanEntryDto)">
            <summary>
            Creates study plan entry
            </summary>
            <param name="createDto">Data for creation</param>
        </member>
        <member name="M:InternshipProgressTracker.Services.StudyPlanEntries.StudyPlanEntryService.UpdateAsync(System.Int32,InternshipProgressTracker.Models.StudyPlanEntries.StudyPlanEntryDto)">
            <summary>
            Updates study plan entry data
            </summary>
            <param name="id">Id of study plan entry</param>
            <param name="updateDto">New data</param>
        </member>
        <member name="M:InternshipProgressTracker.Services.StudyPlanEntries.StudyPlanEntryService.UpdateAsync(System.Int32,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{InternshipProgressTracker.Models.StudyPlanEntries.StudyPlanEntryDto})">
            <summary>
            Patches study plan
            </summary>
            <param name="id">Id of study plan entry</param>
            <param name="patchDocument">Json Patch operations</param>
        </member>
        <member name="M:InternshipProgressTracker.Services.StudyPlanEntries.StudyPlanEntryService.SoftDeleteAsync(System.Int32)">
            <summary>
            Marks study plan entry as deleted
            </summary>
            <param name="id">Id of study plan entry</param>
        </member>
        <member name="M:InternshipProgressTracker.Services.StudyPlanEntries.StudyPlanEntryService.DeleteAsync(System.Int32)">
            <summary>
            Deletes study plan entry
            </summary>
            <param name="id">Id of study plan entry</param>
        </member>
        <member name="T:InternshipProgressTracker.Services.StudyPlans.IStudyPlanService">
            <summary>
            Interface of study plan service
            </summary>
        </member>
        <member name="T:InternshipProgressTracker.Services.StudyPlans.StudyPlanService">
            <summary>
            Service for working with study plans
            </summary>
        </member>
        <member name="M:InternshipProgressTracker.Services.StudyPlans.StudyPlanService.GetWithSoftDeletedAsync">
            <summary>
            Gets all study plans
            </summary>
            <returns></returns>
        </member>
        <member name="M:InternshipProgressTracker.Services.StudyPlans.StudyPlanService.GetAsync">
            <summary>
            Gets list of study plans
            </summary>
            <returns></returns>
        </member>
        <member name="M:InternshipProgressTracker.Services.StudyPlans.StudyPlanService.GetAsync(System.Int32)">
            <summary>
            Gets study plan by id
            </summary>
            <param name="id">Id of study plan</param>
        </member>
        <member name="M:InternshipProgressTracker.Services.StudyPlans.StudyPlanService.CreateAsync(InternshipProgressTracker.Models.StudyPlans.StudyPlanDto)">
            <summary>
            Creates study plan
            </summary>
            <param name="createDto">Data for creation</param>
        </member>
        <member name="M:InternshipProgressTracker.Services.StudyPlans.StudyPlanService.UpdateAsync(System.Int32,InternshipProgressTracker.Models.StudyPlans.StudyPlanDto)">
            <summary>
            Updates study plan data
            </summary>
            <param name="id">Id of study plan</param>
            <param name="updateDto">New data</param>
        </member>
        <member name="M:InternshipProgressTracker.Services.StudyPlans.StudyPlanService.UpdateAsync(System.Int32,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{InternshipProgressTracker.Models.StudyPlans.StudyPlanDto})">
            <summary>
            Patches study plan
            </summary>
            <param name="id">Id of study plan</param>
            <param name="patchDocument">Json Patch operations</param>
        </member>
        <member name="M:InternshipProgressTracker.Services.StudyPlans.StudyPlanService.SoftDeleteAsync(System.Int32)">
            <summary>
            Marks study plan as deleted
            </summary>
            <param name="id">Id of study plan</param>
        </member>
        <member name="M:InternshipProgressTracker.Services.StudyPlans.StudyPlanService.DeleteAsync(System.Int32)">
            <summary>
            Deletes study plan
            </summary>
            <param name="id">Id of study plan</param>
        </member>
        <member name="T:InternshipProgressTracker.Services.Users.IUserService">
            <summary>
            Interface for user service
            </summary>
        </member>
        <member name="T:InternshipProgressTracker.Services.Users.UserService">
            <summary>
            Service for authorization and 
            </summary>
        </member>
        <member name="M:InternshipProgressTracker.Services.Users.UserService.GetAsync(System.Int32)">
            <summary>
            Gets user by id
            </summary>
            <param name="id">Id of user</param>
        </member>
        <member name="M:InternshipProgressTracker.Services.Users.UserService.RegisterAsync(InternshipProgressTracker.Models.Users.RegisterDto,System.Threading.CancellationToken)">
            <summary>
            Creates user entity and saves it in the database
            </summary>
            <param name="registerDto">Contains signup form data</param>
        </member>
        <member name="M:InternshipProgressTracker.Services.Users.UserService.LoginAsync(InternshipProgressTracker.Models.Users.LoginDto,System.Threading.CancellationToken)">
            <summary>
            Checks login data and returns generated token
            </summary>
            <param name="loginDto">Contains login form data</param>
        </member>
        <member name="M:InternshipProgressTracker.Services.Users.UserService.RefreshJwtAsync(System.String,System.Int32)">
            <summary>
            Creates new JWT
            </summary>
        </member>
        <member name="M:InternshipProgressTracker.Startup.CreateRoles(System.IServiceProvider)">
            <summary>
            Creates identity roles
            </summary>
        </member>
        <member name="M:InternshipProgressTracker.Startup.CreateAdmin(System.IServiceProvider)">
            <summary>
            Creates default admin
            </summary>
        </member>
        <member name="T:InternshipProgressTracker.Utils.Mapper.MapperProfile">
            <summary>
            Contains settings for AutoMapper
            </summary>
        </member>
        <member name="T:InternshipProgressTracker.Utils.ITokenGenerator">
            <summary>
            Interface for token generator
            </summary>
        </member>
        <member name="T:InternshipProgressTracker.Utils.TokenGenerator">
            <summary>
            Class for generating JWT tokens
            </summary>
        </member>
        <member name="M:InternshipProgressTracker.Utils.TokenGenerator.GenerateJwt(Microsoft.AspNetCore.Identity.IdentityUser{System.Int32},System.String)">
            <summary>
            Generates JWT token
            </summary>
            <param name="user">Object with user data</param>
        </member>
        <member name="M:InternshipProgressTracker.Utils.TokenGenerator.GenerateRefreshToken">
            <summary>
            Generates refresh token
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.DbContextExtensions">
            <summary>
            Extensions for the database context
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.DbContextExtensions.FindTracked``1(Microsoft.EntityFrameworkCore.DbContext,System.Object[])">
            <summary>
            
            </summary>
            <param name="context">Database context</param>
            <param name="keyValues">Keys for search</param>
        </member>
    </members>
</doc>
